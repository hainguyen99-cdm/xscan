import { Model } from 'mongoose';
import { UserDocument } from './schemas/user.schema';
import { FollowDocument } from './schemas/follow.schema';
import { StreamerApplicationDocument } from '../streamer-applications/streamer-application.schema';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { ChangePasswordDto } from './dto/change-password.dto';
import { ProfilePrivacyDto } from './dto/profile-privacy.dto';
import { ProfileExportDto } from './dto/profile-export.dto';
import { ProfileDeletionDto } from './dto/profile-deletion.dto';
import { FileUploadService } from './services/file-upload.service';
export declare class UsersService {
    private userModel;
    private followModel;
    private streamerApplicationModel;
    private donationLinkModel;
    private donationModel;
    private bankTxModel;
    private fileUploadService;
    constructor(userModel: Model<UserDocument>, followModel: Model<FollowDocument>, streamerApplicationModel: Model<StreamerApplicationDocument>, donationLinkModel: Model<any>, donationModel: Model<any>, bankTxModel: Model<any>, fileUploadService: FileUploadService);
    create(createUserDto: CreateUserDto): Promise<UserDocument>;
    findAll(): Promise<UserDocument[]>;
    findById(id: string): Promise<UserDocument>;
    findByEmail(email: string): Promise<UserDocument | null>;
    findUsersWithBankToken(): Promise<Pick<UserDocument, '_id' | 'bankToken'>[]>;
    findByUsername(username: string): Promise<UserDocument | null>;
    findByPasswordResetToken(token: string): Promise<UserDocument | null>;
    update(id: string, updateUserDto: UpdateUserDto): Promise<UserDocument>;
    changePassword(id: string, changePasswordDto: ChangePasswordDto): Promise<void>;
    setPasswordResetToken(userId: string, token: string, expires: Date): Promise<void>;
    resetPassword(userId: string, hashedPassword: string): Promise<void>;
    setTwoFactorSecret(userId: string, secret: string): Promise<void>;
    enableTwoFactor(userId: string): Promise<UserDocument>;
    disableTwoFactor(userId: string): Promise<UserDocument>;
    updateLastLogin(userId: string): Promise<void>;
    deactivate(id: string): Promise<UserDocument>;
    activate(id: string): Promise<UserDocument>;
    remove(id: string): Promise<void>;
    findActiveUsers(): Promise<UserDocument[]>;
    findUsersByRole(role: string): Promise<UserDocument[]>;
    countUsers(): Promise<number>;
    countActiveUsers(): Promise<number>;
    calculateProfileCompletion(userId: string): Promise<number>;
    updatePrivacySettings(userId: string, privacyDto: ProfilePrivacyDto): Promise<UserDocument>;
    getPublicProfile(userId: string, viewerId?: string): Promise<any>;
    private trackProfileView;
    exportProfile(userId: string, exportDto: ProfileExportDto): Promise<any>;
    private isSensitiveField;
    requestDeletion(userId: string, deletionDto: ProfileDeletionDto): Promise<void>;
    cancelDeletionRequest(userId: string): Promise<void>;
    getProfileStats(userId: string): Promise<any>;
    addVerificationBadge(userId: string, badge: string): Promise<void>;
    removeVerificationBadge(userId: string, badge: string): Promise<void>;
    discoverStreamers(search?: string, category?: string, page?: number, limit?: number): Promise<{
        streamers: any[];
        pagination: any;
    }>;
    private getDonationLinkForStreamer;
    private getTotalDonationsForStreamer;
    getDonationTotals(userId: string): Promise<{
        totalViaSystem: number;
        totalViaBank: number;
        totalAll: number;
    }>;
    getStreamerProfile(username: string, currentUserId?: string): Promise<{
        id: string;
        email: string;
        name: string;
        username: string;
        role: string;
        profilePicture: string;
        coverPhoto: string;
        isEmailVerified: boolean;
        twoFactorEnabled: boolean;
        status: string;
        createdAt: Date;
        totalDonations: number;
        isLive: boolean;
        category: string;
        platform: "twitch" | "youtube" | "kick" | "facebook" | "other";
        channelUrl: string;
        monthlyViewers: number;
        followers: number;
        streamTitle: any;
        game: any;
        bio: string;
        location: string;
        website: string;
        isFollowed: boolean;
        donationLink: any;
        streamerApplication: {
            platform: "twitch" | "youtube" | "kick" | "facebook" | "other";
            channelUrl: string;
            description: string;
            monthlyViewers: number;
            contentCategory: string;
            reasonForApplying: string;
            referrer: string;
            reviewedAt: Date;
            reviewNotes: string;
        };
    }>;
    toggleFollow(userId: string, streamerId: string): Promise<{
        isFollowed: boolean;
        followers: number;
        message: string;
    }>;
}
