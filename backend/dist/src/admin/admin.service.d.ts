import { Model } from 'mongoose';
import { UserDocument } from '../users/schemas/user.schema';
import { TransactionDocument } from '../payments/schemas/transaction.schema';
import { DonationDocument } from '../donations/schemas/donation.schema';
import { OBSSettingsDocument } from '../obs-settings/obs-settings.schema';
import { BankAccountDocument } from '../users/schemas/bank-account.schema';
import { SystemHealthDto, SystemLogDto } from './dto/admin.dto';
export declare class AdminService {
    private userModel;
    private transactionModel;
    private donationModel;
    private obsSettingsModel;
    private bankAccountModel;
    constructor(userModel: Model<UserDocument>, transactionModel: Model<TransactionDocument>, donationModel: Model<DonationDocument>, obsSettingsModel: Model<OBSSettingsDocument>, bankAccountModel: Model<BankAccountDocument>);
    getSystemHealth(adminId: string): Promise<SystemHealthDto>;
    getSystemLogs(level: string, limit: number, adminId: string): Promise<SystemLogDto[]>;
    exportTransactions(format: string, filters: any, adminId: string): Promise<Buffer>;
    private convertToCSV;
    private convertToPDF;
    private convertToExcel;
    private getNestedValue;
    logAdminActivity(adminId: string, type: string, description: string, resourceType: string, resourceId: string, metadata?: any): Promise<void>;
    validateAdminPermissions(adminId: string): Promise<boolean>;
    getAdminDashboardStats(adminId: string): Promise<any>;
    getDeposits(filters: any, adminId: string): Promise<any>;
    getDepositStats(period: string, adminId: string): Promise<any>;
    getDepositById(depositId: string, adminId: string): Promise<any>;
    updateDepositStatus(depositId: string, status: string, adminNotes: string, adminId: string): Promise<any>;
    handleDepositDispute(depositId: string, disputeData: any, adminId: string): Promise<any>;
    applyDepositAdjustment(depositId: string, adjustmentData: any, adminId: string): Promise<any>;
    exportDeposits(format: string, filters: any, adminId: string): Promise<Buffer>;
    getBankAccounts(filters: any, adminId: string): Promise<any>;
    getBankAccountStats(adminId: string): Promise<any>;
    getBankAccountById(accountId: string, adminId: string): Promise<any>;
    createBankAccount(data: any, adminId: string): Promise<any>;
    updateBankAccount(accountId: string, data: any, adminId: string): Promise<any>;
    deleteBankAccount(accountId: string, adminId: string): Promise<void>;
    setDefaultBankAccount(accountId: string, adminId: string): Promise<any>;
    exportBankAccounts(format: string, filters: any, adminId: string): Promise<Buffer>;
}
