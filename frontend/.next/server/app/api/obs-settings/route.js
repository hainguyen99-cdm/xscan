"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/obs-settings/route";
exports.ids = ["app/api/obs-settings/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fobs-settings%2Froute&page=%2Fapi%2Fobs-settings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fobs-settings%2Froute.ts&appDir=D%3A%5Crepo%5Cxscan%5Cfrontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Crepo%5Cxscan%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fobs-settings%2Froute&page=%2Fapi%2Fobs-settings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fobs-settings%2Froute.ts&appDir=D%3A%5Crepo%5Cxscan%5Cfrontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Crepo%5Cxscan%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/../node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/../node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_repo_xscan_frontend_src_app_api_obs_settings_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/obs-settings/route.ts */ \"(rsc)/./src/app/api/obs-settings/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/obs-settings/route\",\n        pathname: \"/api/obs-settings\",\n        filename: \"route\",\n        bundlePath: \"app/api/obs-settings/route\"\n    },\n    resolvedPagePath: \"D:\\\\repo\\\\xscan\\\\frontend\\\\src\\\\app\\\\api\\\\obs-settings\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_repo_xscan_frontend_src_app_api_obs_settings_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/obs-settings/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyLmpzP25hbWU9YXBwJTJGYXBpJTJGb2JzLXNldHRpbmdzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZvYnMtc2V0dGluZ3MlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZvYnMtc2V0dGluZ3MlMkZyb3V0ZS50cyZhcHBEaXI9RCUzQSU1Q3JlcG8lNUN4c2NhbiU1Q2Zyb250ZW5kJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1EJTNBJTVDcmVwbyU1Q3hzY2FuJTVDZnJvbnRlbmQmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2dCO0FBQzdGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veHNjYW4tZnJvbnRlbmQvPzkzN2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxccmVwb1xcXFx4c2NhblxcXFxmcm9udGVuZFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxvYnMtc2V0dGluZ3NcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwic3RhbmRhbG9uZVwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9vYnMtc2V0dGluZ3Mvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9vYnMtc2V0dGluZ3NcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL29icy1zZXR0aW5ncy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkQ6XFxcXHJlcG9cXFxceHNjYW5cXFxcZnJvbnRlbmRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcb2JzLXNldHRpbmdzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL29icy1zZXR0aW5ncy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fobs-settings%2Froute&page=%2Fapi%2Fobs-settings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fobs-settings%2Froute.ts&appDir=D%3A%5Crepo%5Cxscan%5Cfrontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Crepo%5Cxscan%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/obs-settings/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/obs-settings/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   PATCH: () => (/* binding */ PATCH),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/../node_modules/next/dist/server/web/exports/next-response.js\");\n\n// Resolve backend URL safely to avoid self-calls (port 3000) in local dev\nconst resolveBackendUrl = ()=>{\n    const serverUrl = \"http://localhost:3001\";\n    const publicUrl = process.env.NEXT_PUBLIC_BACKEND_URL;\n    let url = serverUrl || publicUrl || \"http://localhost:3001\";\n    if (url.includes(\"localhost:3000\")) {\n        url = url.replace(\"localhost:3000\", \"localhost:3001\");\n    }\n    return url;\n};\nconst BACKEND_URL = resolveBackendUrl();\n// Custom body parser for handling large payloads\nasync function parseBody(request) {\n    try {\n        const contentType = request.headers.get(\"content-type\") || \"\";\n        // For large files, use streaming parser\n        if (contentType.includes(\"multipart/form-data\")) {\n            // Handle multipart form data (file uploads)\n            const formData = await request.formData();\n            const body = {};\n            // Convert FormData entries to array for iteration\n            const entries = Array.from(formData.entries());\n            for (const [key, value] of entries){\n                if (value instanceof File) {\n                    // For very large files, we might want to process in chunks\n                    // But for now, let's try to handle the full file\n                    try {\n                        const arrayBuffer = await value.arrayBuffer();\n                        const base64 = Buffer.from(arrayBuffer).toString(\"base64\");\n                        body[key] = {\n                            name: value.name,\n                            type: value.type,\n                            size: value.size,\n                            data: `data:${value.type};base64,${base64}`\n                        };\n                        console.log(`📁 Processed file: ${value.name}, size: ${value.size} bytes, encoded: ${base64.length} chars`);\n                    } catch (fileError) {\n                        console.error(`❌ Error processing file ${value.name}:`, fileError);\n                        throw new Error(`Failed to process file: ${value.name}`);\n                    }\n                } else {\n                    body[key] = value;\n                }\n            }\n            return body;\n        } else {\n            // Handle JSON payloads with size checking\n            const text = await request.text();\n            if (!text) return {};\n            console.log(`📝 Raw request body size: ${text.length} characters`);\n            // Check if the payload is too large\n            if (text.length > 50 * 1024 * 1024) {\n                throw new Error(\"Request payload exceeds 50MB limit\");\n            }\n            try {\n                return JSON.parse(text);\n            } catch (parseError) {\n                console.error(\"Failed to parse JSON body:\", parseError);\n                throw new Error(\"Invalid JSON payload\");\n            }\n        }\n    } catch (error) {\n        console.error(\"Error parsing request body:\", error);\n        throw error;\n    }\n}\nasync function GET(request) {\n    try {\n        // Get the authorization header\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Authorization header required\"\n            }, {\n                status: 401\n            });\n        }\n        console.log(\"\\uD83D\\uDD0D Fetching OBS settings for user...\");\n        console.log(\"\\uD83C\\uDF10 Backend URL:\", BACKEND_URL);\n        // Test backend connectivity first\n        try {\n            const healthCheck = await fetch(`${BACKEND_URL}/api/health`, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            console.log(\"\\uD83C\\uDFE5 Backend health check status:\", healthCheck.status);\n        } catch (error) {\n            console.error(\"❌ Backend connectivity test failed:\", error);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Backend service is not available. Please ensure the backend server is running on port 3001.\",\n                code: \"BACKEND_UNAVAILABLE\"\n            }, {\n                status: 503\n            });\n        }\n        // First, try to get existing OBS settings\n        const settingsUrl = `${BACKEND_URL}/api/obs-settings/my-settings`;\n        console.log(\"\\uD83D\\uDCE1 Making request to:\", settingsUrl);\n        let response = await fetch(settingsUrl, {\n            headers: {\n                \"Authorization\": authHeader,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        console.log(`📡 Backend response status: ${response.status}`);\n        console.log(`📡 Backend response statusText: ${response.statusText}`);\n        // If settings don't exist (404), create them with defaults\n        if (response.status === 404) {\n            console.log(\"⚠️ OBS settings not found, creating default settings...\");\n            // First, get the user's profile to get their id directly from backend\n            console.log(\"\\uD83D\\uDC64 Getting user profile from backend to get id...\");\n            const profileResponse = await fetch(`${BACKEND_URL}/api/auth/profile`, {\n                headers: {\n                    \"Authorization\": authHeader,\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!profileResponse.ok) {\n                const errorData = await profileResponse.json();\n                console.error(\"❌ Failed to get user profile:\", errorData);\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(errorData, {\n                    status: profileResponse.status\n                });\n            }\n            const profileData = await profileResponse.json();\n            console.log(\"\\uD83D\\uDCE6 Raw profile response:\", profileData);\n            console.log(\"\\uD83D\\uDCE6 Profile response type:\", typeof profileData);\n            console.log(\"\\uD83D\\uDCE6 Profile response keys:\", Object.keys(profileData));\n            // Backend returns: { user: { id, ... } }\n            const userId = profileData?.user?.id;\n            console.log(\"\\uD83D\\uDC64 User ID for streamerId:\", userId);\n            console.log(\"\\uD83D\\uDD0D Available fields in profileData:\", Object.keys(profileData));\n            // Additional debugging to see the full structure\n            if (profileData.user) {\n                console.log(\"\\uD83D\\uDD0D Found nested user object:\", profileData.user);\n                console.log(\"\\uD83D\\uDD0D User object keys:\", Object.keys(profileData.user));\n                console.log(\"\\uD83D\\uDD0D User ID from nested object:\", profileData.user.id);\n            }\n            if (!userId) {\n                console.error(\"❌ Could not extract user ID from profile response\");\n                console.error(\"❌ Full profile response:\", JSON.stringify(profileData, null, 2));\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Could not determine user ID for OBS settings creation\",\n                    code: \"USER_ID_MISSING\"\n                }, {\n                    status: 400\n                });\n            }\n            // Create default OBS settings\n            const createResponse = await fetch(`${BACKEND_URL}/api/obs-settings`, {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": authHeader,\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    streamerId: userId,\n                    imageSettings: {\n                        enabled: true,\n                        mediaType: \"image\",\n                        width: 300,\n                        height: 200,\n                        borderRadius: 8,\n                        shadow: true,\n                        shadowColor: \"#000000\",\n                        shadowBlur: 10,\n                        shadowOffsetX: 2,\n                        shadowOffsetY: 2\n                    },\n                    soundSettings: {\n                        enabled: true,\n                        volume: 80,\n                        fadeIn: 0,\n                        fadeOut: 0,\n                        loop: false\n                    },\n                    animationSettings: {\n                        enabled: true,\n                        animationType: \"fade\",\n                        duration: 500,\n                        easing: \"ease-out\",\n                        direction: \"right\",\n                        bounceIntensity: 20,\n                        zoomScale: 1.2\n                    },\n                    styleSettings: {\n                        backgroundColor: \"#1a1a1a\",\n                        textColor: \"#ffffff\",\n                        accentColor: \"#00ff00\",\n                        borderColor: \"#333333\",\n                        borderWidth: 2,\n                        borderStyle: \"solid\",\n                        fontFamily: \"Arial, sans-serif\",\n                        fontSize: 16,\n                        fontWeight: \"normal\",\n                        fontStyle: \"normal\",\n                        textShadow: true,\n                        textShadowColor: \"#000000\",\n                        textShadowBlur: 3,\n                        textShadowOffsetX: 1,\n                        textShadowOffsetY: 1\n                    },\n                    positionSettings: {\n                        x: 100,\n                        y: 100,\n                        anchor: \"top-left\",\n                        zIndex: 1000,\n                        responsive: true,\n                        mobileScale: 0.8\n                    },\n                    displaySettings: {\n                        duration: 5000,\n                        fadeInDuration: 300,\n                        fadeOutDuration: 300,\n                        autoHide: true,\n                        showProgress: false,\n                        progressColor: \"#00ff00\",\n                        progressHeight: 3\n                    },\n                    generalSettings: {\n                        enabled: true,\n                        maxAlerts: 3,\n                        alertSpacing: 20,\n                        cooldown: 1000,\n                        priority: \"medium\"\n                    },\n                    isActive: true\n                })\n            });\n            console.log(`📝 Create settings response status: ${createResponse.status}`);\n            if (!createResponse.ok) {\n                const errorData = await createResponse.json();\n                console.error(\"❌ Failed to create OBS settings:\", errorData);\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(errorData, {\n                    status: createResponse.status\n                });\n            }\n            console.log(\"✅ OBS settings created successfully, fetching settings...\");\n            // Now try to get the settings again\n            response = await fetch(settingsUrl, {\n                headers: {\n                    \"Authorization\": authHeader,\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            console.log(`📡 Second attempt response status: ${response.status}`);\n        }\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error(\"❌ Error response from backend:\", errorData);\n            console.error(\"❌ Response status:\", response.status);\n            console.error(\"❌ Response statusText:\", response.statusText);\n            // Handle specific error cases\n            if (response.status === 403) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Access denied. OBS settings are only available for streamers and administrators.\",\n                    code: \"ACCESS_DENIED\"\n                }, {\n                    status: 403\n                });\n            }\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(errorData, {\n                status: response.status\n            });\n        }\n        const data = await response.json();\n        // Ensure widgetUrl is present for the frontend\n        if (data && data.streamerId && data.alertToken && !data.widgetUrl) {\n            data.widgetUrl = `${BACKEND_URL}/api/widget-public/alert/${data.streamerId}/${data.alertToken}`;\n        }\n        console.log(\"✅ Successfully retrieved OBS settings:\", data);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(data);\n    } catch (error) {\n        console.error(\"\\uD83D\\uDCA5 Unexpected error in OBS settings API:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to fetch OBS settings\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        // Get the authorization header\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Authorization header required\"\n            }, {\n                status: 401\n            });\n        }\n        // Get the request body\n        const body = await request.json();\n        // Create OBS settings\n        const response = await fetch(`${BACKEND_URL}/api/obs-settings`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": authHeader,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            // Handle specific error cases\n            if (response.status === 403) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Access denied. OBS settings are only available for streamers and administrators.\",\n                    code: \"ACCESS_DENIED\"\n                }, {\n                    status: 403\n                });\n            }\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(errorData, {\n                status: response.status\n            });\n        }\n        const data = await response.json();\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(data, {\n            status: 201\n        });\n    } catch (error) {\n        console.error(\"Error creating OBS settings:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to create OBS settings\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PATCH(request) {\n    try {\n        console.log(\"\\uD83D\\uDE80 PATCH request received for OBS settings\");\n        // Get the authorization header\n        const authHeader = request.headers.get(\"authorization\");\n        if (!authHeader) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Authorization header required\"\n            }, {\n                status: 401\n            });\n        }\n        // Log request details for debugging\n        const contentLength = request.headers.get(\"content-length\");\n        const contentType = request.headers.get(\"content-type\");\n        console.log(\"\\uD83D\\uDCDD Request content-length header:\", contentLength);\n        console.log(\"\\uD83D\\uDCDD Request content-type:\", contentType);\n        console.log(\"\\uD83D\\uDCDD Request method:\", request.method);\n        console.log(\"\\uD83D\\uDCDD Request URL:\", request.url);\n        // Use custom body parser for large payloads\n        console.log(\"\\uD83D\\uDD04 Starting to parse request body...\");\n        const body = await parseBody(request);\n        console.log(\"\\uD83D\\uDCDD Parsed request body size:\", JSON.stringify(body).length, \"characters\");\n        console.log(\"\\uD83D\\uDCDD Body keys:\", Object.keys(body));\n        // Check if body is too large for backend\n        const bodySize = JSON.stringify(body).length;\n        if (bodySize > 50 * 1024 * 1024) {\n            console.warn(\"⚠️ Body size exceeds 50MB, may cause backend issues\");\n        }\n        // Update OBS settings\n        const response = await fetch(`${BACKEND_URL}/api/obs-settings/my-settings`, {\n            method: \"PATCH\",\n            headers: {\n                \"Authorization\": authHeader,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error(\"❌ Backend response error:\", response.status, errorData);\n            // Handle specific error cases\n            if (response.status === 403) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Access denied. OBS settings are only available for streamers and administrators.\",\n                    code: \"ACCESS_DENIED\"\n                }, {\n                    status: 403\n                });\n            }\n            if (response.status === 404) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"OBS settings not found. Please create settings first.\",\n                    code: \"SETTINGS_NOT_FOUND\"\n                }, {\n                    status: 404\n                });\n            }\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(errorData, {\n                status: response.status\n            });\n        }\n        const data = await response.json();\n        console.log(\"✅ Backend update successful\");\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(data, {\n            status: 200\n        });\n    } catch (error) {\n        console.error(\"Error updating OBS settings:\", error);\n        // Handle specific parsing errors\n        if (error instanceof Error && error.message.includes(\"Failed to parse request body\")) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Request payload is too large or invalid. Please ensure files are under 50MB.\",\n                code: \"PAYLOAD_TOO_LARGE\"\n            }, {\n                status: 413\n            });\n        }\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to update OBS settings\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/obs-settings/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/../node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fobs-settings%2Froute&page=%2Fapi%2Fobs-settings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fobs-settings%2Froute.ts&appDir=D%3A%5Crepo%5Cxscan%5Cfrontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Crepo%5Cxscan%5Cfrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();