"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/obs-settings/page",{

/***/ "(app-pages-browser)/./src/lib/s3-upload.service.ts":
/*!**************************************!*\
  !*** ./src/lib/s3-upload.service.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S3UploadService: function() { return /* binding */ S3UploadService; }\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(app-pages-browser)/./src/lib/api.ts\");\n\nclass S3UploadService {\n    /**\r\n   * Upload a single file to S3\r\n   */ static async uploadFile(file, onProgress) {\n        const token = (0,_api__WEBPACK_IMPORTED_MODULE_0__.getStoredToken)();\n        if (!token) {\n            throw new Error(\"Authentication required. Please log in again.\");\n        }\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        formData.append(\"mediaType\", file.type);\n        return new Promise((resolve, reject)=>{\n            const xhr = new XMLHttpRequest();\n            // Track upload progress\n            if (onProgress) {\n                xhr.upload.addEventListener(\"progress\", (event)=>{\n                    if (event.lengthComputable) {\n                        const percentage = Math.round(event.loaded * 100 / event.total);\n                        onProgress({\n                            loaded: event.loaded,\n                            total: event.total,\n                            percentage\n                        });\n                    }\n                });\n            }\n            xhr.addEventListener(\"load\", ()=>{\n                if (xhr.status === 200) {\n                    try {\n                        const response = JSON.parse(xhr.responseText);\n                        if (response.success) {\n                            resolve(response.data);\n                        } else {\n                            reject(new Error(response.error || \"Upload failed\"));\n                        }\n                    } catch (error) {\n                        reject(new Error(\"Invalid response from server\"));\n                    }\n                } else {\n                    try {\n                        const errorResponse = JSON.parse(xhr.responseText);\n                        reject(new Error(errorResponse.error || \"Upload failed with status \".concat(xhr.status)));\n                    } catch (e) {\n                        reject(new Error(\"Upload failed with status \".concat(xhr.status)));\n                    }\n                }\n            });\n            xhr.addEventListener(\"error\", ()=>{\n                reject(new Error(\"Network error during upload\"));\n            });\n            xhr.addEventListener(\"timeout\", ()=>{\n                reject(new Error(\"Upload timeout\"));\n            });\n            xhr.open(\"POST\", this.UPLOAD_ENDPOINT);\n            xhr.setRequestHeader(\"Authorization\", \"Bearer \".concat(token));\n            xhr.timeout = 300000; // 5 minutes timeout\n            xhr.send(formData);\n        });\n    }\n    /**\r\n   * Upload multiple files to S3\r\n   */ static async uploadMultipleFiles(files, onProgress) {\n        const results = [];\n        for(let i = 0; i < files.length; i++){\n            const file = files[i];\n            const progressCallback = onProgress ? (progress)=>onProgress(i, progress) : undefined;\n            try {\n                const result = await this.uploadFile(file, progressCallback);\n                results.push(result);\n            } catch (error) {\n                console.error(\"Failed to upload file \".concat(file.name, \":\"), error);\n                throw new Error(\"Failed to upload \".concat(file.name, \": \").concat(error.message));\n            }\n        }\n        return results;\n    }\n    /**\r\n   * Check if a URL is an S3 URL\r\n   */ static isS3Url(url) {\n        try {\n            const urlObj = new URL(url);\n            return urlObj.hostname.includes(\"s3\") || urlObj.hostname.includes(\"amazonaws.com\");\n        } catch (e) {\n            return false;\n        }\n    }\n    /**\r\n   * Check if a URL is a base64 data URL\r\n   */ static isBase64DataUrl(url) {\n        return url && url.startsWith(\"data:\") && url.includes(\"base64,\");\n    }\n    /**\r\n   * Validate file before upload\r\n   */ static validateFile(file) {\n        // Check file size (50MB limit)\n        if (file.size > 50 * 1024 * 1024) {\n            return {\n                isValid: false,\n                error: \"File size must be under 50MB. Your file is \".concat((file.size / (1024 * 1024)).toFixed(1), \"MB.\")\n            };\n        }\n        // Check file type\n        const supportedTypes = [\n            \"image/jpeg\",\n            \"image/jpg\",\n            \"image/png\",\n            \"image/gif\",\n            \"image/webp\",\n            \"video/mp4\",\n            \"video/webm\",\n            \"audio/mpeg\",\n            \"audio/mp3\",\n            \"audio/wav\",\n            \"audio/ogg\"\n        ];\n        if (!supportedTypes.includes(file.type)) {\n            return {\n                isValid: false,\n                error: \"Unsupported file type. Supported formats: Images (JPG, PNG, GIF, WebP), Videos (MP4, WebM), Audio (MP3, WAV, OGG)\"\n            };\n        }\n        return {\n            isValid: true\n        };\n    }\n}\nS3UploadService.UPLOAD_ENDPOINT = \"/api/obs-settings/media/upload\";\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/s3-upload.service.ts\n"));

/***/ })

});