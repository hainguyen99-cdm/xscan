"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"221bf926377b\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvZ2xvYmFscy5jc3M/N2U4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjIyMWJmOTI2Mzc3YlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: function() { return /* binding */ api; },\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; },\n/* harmony export */   apiEndpoints: function() { return /* binding */ apiEndpoints; },\n/* harmony export */   createBankAccount: function() { return /* binding */ createBankAccount; },\n/* harmony export */   deleteBankAccount: function() { return /* binding */ deleteBankAccount; },\n/* harmony export */   getBankList: function() { return /* binding */ getBankList; },\n/* harmony export */   getStoredToken: function() { return /* binding */ getStoredToken; },\n/* harmony export */   getUserBankAccounts: function() { return /* binding */ getUserBankAccounts; },\n/* harmony export */   isTokenExpired: function() { return /* binding */ isTokenExpired; },\n/* harmony export */   obsSettingsApi: function() { return /* binding */ obsSettingsApi; },\n/* harmony export */   removeAuthToken: function() { return /* binding */ removeAuthToken; },\n/* harmony export */   setAuthToken: function() { return /* binding */ setAuthToken; },\n/* harmony export */   setDefaultBankAccount: function() { return /* binding */ setDefaultBankAccount; },\n/* harmony export */   updateBankAccount: function() { return /* binding */ updateBankAccount; },\n/* harmony export */   validateAuthToken: function() { return /* binding */ validateAuthToken; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/../node_modules/axios/lib/axios.js\");\n\n// Token storage key\nconst TOKEN_KEY = \"auth-token\"; // Changed to match middleware cookie name\n// Create axios instance with default configuration\n// Use window.location.origin in browser to match current protocol (avoid mixed content)\nconst resolveBaseUrl = ()=>{\n    var _window_location;\n    if ( true && ((_window_location = window.location) === null || _window_location === void 0 ? void 0 : _window_location.origin)) {\n        return window.location.origin;\n    }\n    return \"http://14.225.211.248\" || 0;\n};\nconst api = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: resolveBaseUrl(),\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Request interceptor to add auth token\napi.interceptors.request.use((config)=>{\n    const token = getStoredToken();\n    if (token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n    }\n    return config;\n}, (error)=>{\n    return Promise.reject(error);\n});\n// Response interceptor to handle common errors\napi.interceptors.response.use((response)=>response, async (error)=>{\n    var _error_response;\n    if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n        // Handle unauthorized access - clear the token\n        console.log(\"401 Unauthorized - clearing token\");\n        removeAuthToken();\n        delete api.defaults.headers.common.Authorization;\n        // If we're not on a public route, redirect to login\n        if (true) {\n            const publicRoutes = [\n                \"/login\",\n                \"/register\",\n                \"/forgot-password\",\n                \"/reset-password\"\n            ];\n            const currentPath = window.location.pathname;\n            if (!publicRoutes.includes(currentPath)) {\n                window.location.href = \"/login\";\n            }\n        }\n    }\n    return Promise.reject(error);\n});\n// API endpoints\nconst apiEndpoints = {\n    // Authentication\n    auth: {\n        login: \"/api/auth/login\",\n        register: \"/api/auth/register\",\n        logout: \"/api/auth/logout\",\n        refresh: \"/api/auth/refresh\",\n        profile: \"/api/auth/profile\"\n    },\n    // Targets\n    targets: {\n        list: \"/api/targets\",\n        create: \"/api/targets\",\n        get: (id)=>\"/api/targets/\".concat(id),\n        update: (id)=>\"/api/targets/\".concat(id),\n        delete: (id)=>\"/api/targets/\".concat(id)\n    },\n    // Scans\n    scans: {\n        list: \"/api/scans\",\n        create: \"/api/scans\",\n        get: (id)=>\"/api/scans/\".concat(id),\n        update: (id)=>\"/api/scans/\".concat(id),\n        delete: (id)=>\"/api/scans/\".concat(id),\n        start: (id)=>\"/api/scans/\".concat(id, \"/start\"),\n        stop: (id)=>\"/api/scans/\".concat(id, \"/stop\"),\n        results: (id)=>\"/api/scans/\".concat(id, \"/results\"),\n        logs: (id)=>\"/api/scans/\".concat(id, \"/logs\")\n    },\n    // Projects\n    projects: {\n        list: \"/api/projects\",\n        create: \"/api/projects\",\n        get: (id)=>\"/api/projects/\".concat(id),\n        update: (id)=>\"/api/projects/\".concat(id),\n        delete: (id)=>\"/api/projects/\".concat(id),\n        members: (id)=>\"/api/projects/\".concat(id, \"/members\")\n    },\n    // Users\n    users: {\n        list: \"/api/users\",\n        get: (id)=>\"/api/users/\".concat(id),\n        update: (id)=>\"/api/users/\".concat(id),\n        activate: (id)=>\"/api/users/\".concat(id, \"/activate\"),\n        deactivate: (id)=>\"/api/users/\".concat(id, \"/deactivate\"),\n        delete: (id)=>\"/api/users/\".concat(id),\n        stats: \"/api/users/stats\",\n        discoverStreamers: \"/api/users/discover/streamers\"\n    },\n    // Wallets\n    wallets: {\n        create: \"/api/wallets\",\n        get: (id)=>\"/api/wallets/\".concat(id),\n        getByUser: (userId)=>\"/api/wallets/user/\".concat(userId),\n        addFunds: (id)=>\"/api/wallets/\".concat(id, \"/add-funds\"),\n        withdrawFunds: (id)=>\"/api/wallets/\".concat(id, \"/withdraw-funds\"),\n        transferFunds: (id)=>\"/api/wallets/\".concat(id, \"/transfer-funds\"),\n        getBalance: (id)=>\"/api/wallets/\".concat(id, \"/balance\"),\n        getTransactions: (id)=>\"/api/wallets/\".concat(id, \"/transactions\"),\n        getTransaction: (id, transactionId)=>\"/api/wallets/\".concat(id, \"/transactions/\").concat(transactionId),\n        getTransactionsByType: (id, type)=>\"/api/wallets/\".concat(id, \"/transactions/type/\").concat(type),\n        getTransactionStats: (id)=>\"/api/wallets/\".concat(id, \"/transaction-stats\"),\n        processDonation: (id)=>\"/api/wallets/\".concat(id, \"/donate\"),\n        processFee: (id)=>\"/api/wallets/\".concat(id, \"/process-fee\"),\n        deactivate: (id)=>\"/api/wallets/\".concat(id, \"/deactivate\"),\n        reactivate: (id)=>\"/api/wallets/\".concat(id, \"/reactivate\")\n    },\n    // Admin\n    admin: {\n        users: {\n            list: \"/api/admin/users\",\n            get: (id)=>\"/api/admin/users/\".concat(id),\n            update: (id)=>\"/api/admin/users/\".concat(id),\n            updateStatus: (id)=>\"/api/admin/users/\".concat(id, \"/status\"),\n            verify: (id)=>\"/api/admin/users/\".concat(id, \"/verify\"),\n            unverify: (id)=>\"/api/admin/users/\".concat(id, \"/verify\"),\n            delete: (id)=>\"/api/admin/users/\".concat(id)\n        }\n    }\n};\n// API functions\nconst apiClient = {\n    // Authentication\n    auth: {\n        // Backend returns top-level fields: { access_token, user }\n        login: async (email, password)=>{\n            const response = await api.post(apiEndpoints.auth.login, {\n                email,\n                password\n            });\n            return response.data;\n        },\n        register: async (email, password, firstName, lastName, role)=>{\n            const response = await api.post(apiEndpoints.auth.register, {\n                email,\n                password,\n                firstName,\n                lastName,\n                role\n            });\n            return response.data;\n        },\n        logout: async ()=>{\n            const response = await api.post(apiEndpoints.auth.logout);\n            return response.data;\n        },\n        getProfile: async ()=>{\n            const response = await api.get(apiEndpoints.auth.profile);\n            return response.data;\n        }\n    },\n    // Targets\n    targets: {\n        list: async (params)=>{\n            const response = await api.get(apiEndpoints.targets.list, {\n                params\n            });\n            return response.data;\n        },\n        create: async (data)=>{\n            const response = await api.post(apiEndpoints.targets.create, data);\n            return response.data;\n        },\n        get: async (id)=>{\n            const response = await api.get(apiEndpoints.targets.get(id));\n            return response.data;\n        },\n        update: async (id, data)=>{\n            const response = await api.put(apiEndpoints.targets.update(id), data);\n            return response.data;\n        },\n        delete: async (id)=>{\n            const response = await api.delete(apiEndpoints.targets.delete(id));\n            return response.data;\n        }\n    },\n    // Scans\n    scans: {\n        list: async (params)=>{\n            const response = await api.get(apiEndpoints.scans.list, {\n                params\n            });\n            return response.data;\n        },\n        create: async (data)=>{\n            const response = await api.post(apiEndpoints.scans.create, data);\n            return response.data;\n        },\n        get: async (id)=>{\n            const response = await api.get(apiEndpoints.scans.get(id));\n            return response.data;\n        },\n        update: async (id, data)=>{\n            const response = await api.put(apiEndpoints.scans.update(id), data);\n            return response.data;\n        },\n        delete: async (id)=>{\n            const response = await api.delete(apiEndpoints.scans.delete(id));\n            return response.data;\n        }\n    },\n    // Projects\n    projects: {\n        list: async ()=>{\n            const response = await api.get(apiEndpoints.projects.list);\n            return response.data;\n        },\n        create: async (data)=>{\n            const response = await api.post(apiEndpoints.projects.create, data);\n            return response.data;\n        },\n        get: async (id)=>{\n            const response = await api.get(apiEndpoints.projects.get(id));\n            return response.data;\n        },\n        update: async (id, data)=>{\n            const response = await api.put(apiEndpoints.projects.update(id), data);\n            return response.data;\n        },\n        delete: async (id)=>{\n            const response = await api.delete(apiEndpoints.projects.delete(id));\n            return response.data;\n        }\n    },\n    // Users\n    users: {\n        list: async ()=>{\n            const response = await api.get(apiEndpoints.users.list);\n            return response.data;\n        },\n        get: async (id)=>{\n            const response = await api.get(apiEndpoints.users.get(id));\n            return response.data;\n        },\n        update: async (id, data)=>{\n            const response = await api.put(apiEndpoints.users.update(id), data);\n            return response.data;\n        },\n        activate: async (id)=>{\n            const response = await api.patch(apiEndpoints.users.activate(id));\n            return response.data;\n        },\n        deactivate: async (id)=>{\n            const response = await api.patch(apiEndpoints.users.deactivate(id));\n            return response.data;\n        },\n        delete: async (id)=>{\n            const response = await api.delete(apiEndpoints.users.delete(id));\n            return response.data;\n        },\n        stats: async ()=>{\n            const response = await api.get(apiEndpoints.users.stats);\n            return response.data;\n        },\n        discoverStreamers: async (params)=>{\n            const response = await api.get(apiEndpoints.users.discoverStreamers, {\n                params\n            });\n            return response.data;\n        }\n    },\n    // Admin\n    admin: {\n        users: {\n            list: async (params)=>{\n                const response = await api.get(apiEndpoints.admin.users.list, {\n                    params\n                });\n                return response.data;\n            },\n            get: async (id)=>{\n                const response = await api.get(apiEndpoints.admin.users.get(id));\n                return response.data;\n            },\n            update: async (id, data)=>{\n                const response = await api.put(apiEndpoints.admin.users.update(id), data);\n                return response.data;\n            },\n            updateStatus: async (id, status, reason)=>{\n                const response = await api.post(apiEndpoints.admin.users.updateStatus(id), {\n                    status,\n                    reason\n                });\n                return response.data;\n            },\n            verify: async (id)=>{\n                const response = await api.post(apiEndpoints.admin.users.verify(id));\n                return response.data;\n            },\n            unverify: async (id)=>{\n                const response = await api.delete(apiEndpoints.admin.users.unverify(id));\n                return response.data;\n            },\n            delete: async (id)=>{\n                const response = await api.delete(apiEndpoints.admin.users.delete(id));\n                return response.data;\n            }\n        }\n    },\n    // Wallets\n    wallets: {\n        create: async (data)=>{\n            const response = await api.post(apiEndpoints.wallets.create, data);\n            return response.data;\n        },\n        getByUser: async (userId)=>{\n            const response = await api.get(apiEndpoints.wallets.getByUser(userId));\n            return response.data;\n        },\n        getTransactions: async (walletId)=>{\n            const response = await api.get(apiEndpoints.wallets.getTransactions(walletId));\n            return response.data;\n        },\n        addFunds: async (walletId, data)=>{\n            const response = await api.post(apiEndpoints.wallets.addFunds(walletId), data);\n            return response.data;\n        },\n        withdrawFunds: async (walletId, data)=>{\n            const response = await api.post(apiEndpoints.wallets.withdrawFunds(walletId), data);\n            return response.data;\n        },\n        transferFunds: async (walletId, data)=>{\n            const response = await api.post(apiEndpoints.wallets.transferFunds(walletId), data);\n            return response.data;\n        }\n    }\n};\n// OBS Settings API functions\nconst obsSettingsApi = {\n    // Get current user's OBS settings\n    async getMySettings () {\n        const response = await api.get(\"/api/obs-settings\");\n        return response.data;\n    },\n    // Create new OBS settings\n    async createSettings (data) {\n        const response = await api.post(\"/api/obs-settings\", data);\n        return response.data;\n    },\n    // Update existing OBS settings\n    async updateSettings (data) {\n        const response = await api.patch(\"/api/obs-settings\", data);\n        return response.data;\n    },\n    // Test OBS alert\n    async testAlert (data) {\n        const response = await api.post(\"/api/obs-settings/test-alert\", data);\n        return response.data;\n    },\n    // Test OBS connection\n    async testConnection () {\n        const response = await api.get(\"/api/obs-settings/test-connection\");\n        return response.data;\n    }\n};\n// Token management helpers\nfunction setAuthToken(token) {\n    if (true) {\n        // Store in cookies to match middleware expectations\n        document.cookie = \"\".concat(TOKEN_KEY, \"=\").concat(token, \"; path=/; max-age=\").concat(24 * 60 * 60, \"; SameSite=Lax\");\n        // Also store in localStorage as backup\n        localStorage.setItem(TOKEN_KEY, token);\n    }\n}\nfunction getStoredToken() {\n    if (true) {\n        // Try cookies first (matches middleware)\n        const cookies = document.cookie.split(\";\");\n        const authCookie = cookies.find((cookie)=>cookie.trim().startsWith(\"\".concat(TOKEN_KEY, \"=\")));\n        if (authCookie) {\n            const token = authCookie.split(\"=\")[1];\n            // Restore to localStorage as backup\n            localStorage.setItem(TOKEN_KEY, token);\n            return token;\n        }\n        // Fallback to localStorage\n        return localStorage.getItem(TOKEN_KEY);\n    }\n    return null;\n}\nfunction removeAuthToken() {\n    if (true) {\n        // Remove from cookies\n        document.cookie = \"\".concat(TOKEN_KEY, \"=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\");\n        // Remove from localStorage\n        localStorage.removeItem(TOKEN_KEY);\n    }\n}\nasync function validateAuthToken() {\n    try {\n        console.log(\"Validating auth token...\");\n        const token = getStoredToken();\n        console.log(\"Stored token found:\", !!token);\n        if (!token) {\n            console.log(\"No token found, returning invalid\");\n            return {\n                isValid: false,\n                user: null\n            };\n        }\n        // For testing purposes, if we have a mock token, return a mock user\n        if (token === \"mock-token-for-testing\") {\n            console.log(\"Mock token detected, returning mock streamer user for testing\");\n            const mockUser = {\n                id: \"mock-streamer-123\",\n                email: \"streamer@test.com\",\n                name: \"Test Streamer\",\n                username: \"teststreamer\",\n                role: \"streamer\",\n                profilePicture: \"/api/placeholder/40/40\",\n                bio: \"Mock streamer for testing\",\n                location: \"Test Location\",\n                website: \"https://test.com\",\n                timezone: \"UTC\",\n                notifications: {\n                    email: true,\n                    push: true,\n                    sms: false\n                },\n                privacy: {\n                    profilePublic: true,\n                    showEmail: false,\n                    showLocation: true\n                },\n                isEmailVerified: true,\n                twoFactorEnabled: false,\n                status: \"active\",\n                createdAt: new Date().toISOString(),\n                lastLoginAt: new Date().toISOString()\n            };\n            return {\n                isValid: true,\n                user: mockUser\n            };\n        }\n        const response = await apiClient.auth.getProfile();\n        console.log(\"Profile response:\", response);\n        // Backend returns { user: {...} } directly, not wrapped in ApiResponse\n        if (response && response.user) {\n            console.log(\"Token validation successful, user:\", response.user.username);\n            return {\n                isValid: true,\n                user: response.user\n            };\n        }\n        console.log(\"Token validation failed: no user data in response\");\n        return {\n            isValid: false,\n            user: null\n        };\n    } catch (error) {\n        var _error_response, _error_response1, _error_message;\n        console.error(\"Token validation error:\", error);\n        // Only return mock user for network errors, not authentication errors\n        if ((error === null || error === void 0 ? void 0 : (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401 || (error === null || error === void 0 ? void 0 : (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.status) === 403) {\n            console.log(\"Authentication error, clearing token and returning invalid\");\n            removeAuthToken();\n            return {\n                isValid: false,\n                user: null\n            };\n        }\n        // For network errors or other issues, if we have a token, try to maintain session\n        const token = getStoredToken();\n        if (token && ((error === null || error === void 0 ? void 0 : error.code) === \"NETWORK_ERROR\" || (error === null || error === void 0 ? void 0 : (_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes(\"fetch\")))) {\n            console.log(\"Network error but token exists, maintaining session temporarily\");\n            // Don't return mock user, just return invalid to trigger re-authentication\n            return {\n                isValid: false,\n                user: null\n            };\n        }\n        return {\n            isValid: false,\n            user: null\n        };\n    }\n}\nfunction isTokenExpired() {\n    // TODO: Implement JWT expiration check if token contains exp claim\n    // For now, we don't have expiration info in the token storage\n    return false;\n}\n// Bank Account API functions\nconst getBankList = async ()=>{\n    const response = await fetch(\"https://api.vietqr.io/v2/banks\");\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch bank list\");\n    }\n    return response.json();\n};\nconst getUserBankAccounts = async ()=>{\n    const token = getStoredToken();\n    if (!token) {\n        throw new Error(\"Authentication required\");\n    }\n    const response = await fetch(\"/api/users/bank-accounts\", {\n        headers: {\n            \"Authorization\": \"Bearer \".concat(token)\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch bank accounts\");\n    }\n    const data = await response.json();\n    if (Array.isArray(data)) {\n        return data;\n    }\n    return data.data || data.accounts || [];\n};\nconst createBankAccount = async (bankAccountData)=>{\n    const token = getStoredToken();\n    if (!token) {\n        throw new Error(\"Authentication required\");\n    }\n    const response = await fetch(\"/api/users/bank-accounts\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": \"Bearer \".concat(token),\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(bankAccountData)\n    });\n    if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create bank account\");\n    }\n    const data = await response.json();\n    return data.data || data;\n};\nconst updateBankAccount = async (accountId, bankAccountData)=>{\n    const token = getStoredToken();\n    if (!token) {\n        throw new Error(\"Authentication required\");\n    }\n    const response = await fetch(\"/api/users/bank-accounts/\".concat(accountId), {\n        method: \"PATCH\",\n        headers: {\n            \"Authorization\": \"Bearer \".concat(token),\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(bankAccountData)\n    });\n    if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update bank account\");\n    }\n    const data = await response.json();\n    return data.data || data;\n};\nconst deleteBankAccount = async (accountId)=>{\n    const token = getStoredToken();\n    if (!token) {\n        throw new Error(\"Authentication required\");\n    }\n    const response = await fetch(\"/api/users/bank-accounts/\".concat(accountId), {\n        method: \"DELETE\",\n        headers: {\n            \"Authorization\": \"Bearer \".concat(token)\n        }\n    });\n    if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to delete bank account\");\n    }\n};\nconst setDefaultBankAccount = async (accountId)=>{\n    const token = getStoredToken();\n    if (!token) {\n        throw new Error(\"Authentication required\");\n    }\n    const response = await fetch(\"/api/users/bank-accounts/\".concat(accountId, \"/set-default\"), {\n        method: \"PATCH\",\n        headers: {\n            \"Authorization\": \"Bearer \".concat(token),\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to set default bank account\");\n    }\n    const data = await response.json();\n    return data.data || data;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});