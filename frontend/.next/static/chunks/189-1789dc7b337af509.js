"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[189],{30189:function(t,a,e){e.d(a,{G$:function(){return y},H6:function(){return l},Nr:function(){return w},Xz:function(){return h},Zw:function(){return m},_f:function(){return g},hV:function(){return u},hi:function(){return n},pc:function(){return f},pw:function(){return p},uB:function(){return c},validateAuthToken:function(){return d},x1:function(){return o}});var s=e(91892);let r="auth-token",n=s.Z.create({baseURL:"http://localhost:3001",timeout:3e4,headers:{"Content-Type":"application/json"}});n.interceptors.request.use(t=>{let a=u();return a&&(t.headers.Authorization="Bearer ".concat(a)),t},t=>Promise.reject(t)),n.interceptors.response.use(t=>t,async t=>{var a;return(null===(a=t.response)||void 0===a?void 0:a.status)===401&&(console.log("401 Unauthorized - clearing token"),l(),delete n.defaults.headers.common.Authorization,["/login","/register","/forgot-password","/reset-password"].includes(window.location.pathname)||(window.location.href="/login")),Promise.reject(t)});let i={auth:{login:"/api/auth/login",register:"/api/auth/register",logout:"/api/auth/logout",refresh:"/api/auth/refresh",profile:"/api/auth/profile"},targets:{list:"/api/targets",create:"/api/targets",get:t=>"/api/targets/".concat(t),update:t=>"/api/targets/".concat(t),delete:t=>"/api/targets/".concat(t)},scans:{list:"/api/scans",create:"/api/scans",get:t=>"/api/scans/".concat(t),update:t=>"/api/scans/".concat(t),delete:t=>"/api/scans/".concat(t),start:t=>"/api/scans/".concat(t,"/start"),stop:t=>"/api/scans/".concat(t,"/stop"),results:t=>"/api/scans/".concat(t,"/results"),logs:t=>"/api/scans/".concat(t,"/logs")},projects:{list:"/api/projects",create:"/api/projects",get:t=>"/api/projects/".concat(t),update:t=>"/api/projects/".concat(t),delete:t=>"/api/projects/".concat(t),members:t=>"/api/projects/".concat(t,"/members")},users:{list:"/api/users",get:t=>"/api/users/".concat(t),update:t=>"/api/users/".concat(t),activate:t=>"/api/users/".concat(t,"/activate"),deactivate:t=>"/api/users/".concat(t,"/deactivate"),delete:t=>"/api/users/".concat(t),stats:"/api/users/stats",discoverStreamers:"/api/users/discover/streamers"},wallets:{create:"/api/wallets",get:t=>"/api/wallets/".concat(t),getByUser:t=>"/api/wallets/user/".concat(t),addFunds:t=>"/api/wallets/".concat(t,"/add-funds"),withdrawFunds:t=>"/api/wallets/".concat(t,"/withdraw-funds"),transferFunds:t=>"/api/wallets/".concat(t,"/transfer-funds"),getBalance:t=>"/api/wallets/".concat(t,"/balance"),getTransactions:t=>"/api/wallets/".concat(t,"/transactions"),getTransaction:(t,a)=>"/api/wallets/".concat(t,"/transactions/").concat(a),getTransactionsByType:(t,a)=>"/api/wallets/".concat(t,"/transactions/type/").concat(a),getTransactionStats:t=>"/api/wallets/".concat(t,"/transaction-stats"),processDonation:t=>"/api/wallets/".concat(t,"/donate"),processFee:t=>"/api/wallets/".concat(t,"/process-fee"),deactivate:t=>"/api/wallets/".concat(t,"/deactivate"),reactivate:t=>"/api/wallets/".concat(t,"/reactivate")},admin:{users:{list:"/api/admin/users",get:t=>"/api/admin/users/".concat(t),update:t=>"/api/admin/users/".concat(t),updateStatus:t=>"/api/admin/users/".concat(t,"/status"),verify:t=>"/api/admin/users/".concat(t,"/verify"),unverify:t=>"/api/admin/users/".concat(t,"/verify"),delete:t=>"/api/admin/users/".concat(t)}}},o={auth:{login:async(t,a)=>(await n.post(i.auth.login,{email:t,password:a})).data,register:async(t,a,e,s,r)=>(await n.post(i.auth.register,{email:t,password:a,firstName:e,lastName:s,role:r})).data,logout:async()=>(await n.post(i.auth.logout)).data,getProfile:async()=>(await n.get(i.auth.profile)).data},targets:{list:async t=>(await n.get(i.targets.list,{params:t})).data,create:async t=>(await n.post(i.targets.create,t)).data,get:async t=>(await n.get(i.targets.get(t))).data,update:async(t,a)=>(await n.put(i.targets.update(t),a)).data,delete:async t=>(await n.delete(i.targets.delete(t))).data},scans:{list:async t=>(await n.get(i.scans.list,{params:t})).data,create:async t=>(await n.post(i.scans.create,t)).data,get:async t=>(await n.get(i.scans.get(t))).data,update:async(t,a)=>(await n.put(i.scans.update(t),a)).data,delete:async t=>(await n.delete(i.scans.delete(t))).data},projects:{list:async()=>(await n.get(i.projects.list)).data,create:async t=>(await n.post(i.projects.create,t)).data,get:async t=>(await n.get(i.projects.get(t))).data,update:async(t,a)=>(await n.put(i.projects.update(t),a)).data,delete:async t=>(await n.delete(i.projects.delete(t))).data},users:{list:async()=>(await n.get(i.users.list)).data,get:async t=>(await n.get(i.users.get(t))).data,update:async(t,a)=>(await n.put(i.users.update(t),a)).data,activate:async t=>(await n.patch(i.users.activate(t))).data,deactivate:async t=>(await n.patch(i.users.deactivate(t))).data,delete:async t=>(await n.delete(i.users.delete(t))).data,stats:async()=>(await n.get(i.users.stats)).data,discoverStreamers:async t=>(await n.get(i.users.discoverStreamers,{params:t})).data},admin:{users:{list:async t=>(await n.get(i.admin.users.list,{params:t})).data,get:async t=>(await n.get(i.admin.users.get(t))).data,update:async(t,a)=>(await n.put(i.admin.users.update(t),a)).data,updateStatus:async(t,a,e)=>(await n.post(i.admin.users.updateStatus(t),{status:a,reason:e})).data,verify:async t=>(await n.post(i.admin.users.verify(t))).data,unverify:async t=>(await n.delete(i.admin.users.unverify(t))).data,delete:async t=>(await n.delete(i.admin.users.delete(t))).data}},wallets:{create:async t=>(await n.post(i.wallets.create,t)).data,getByUser:async t=>(await n.get(i.wallets.getByUser(t))).data,getTransactions:async t=>(await n.get(i.wallets.getTransactions(t))).data,addFunds:async(t,a)=>(await n.post(i.wallets.addFunds(t),a)).data,withdrawFunds:async(t,a)=>(await n.post(i.wallets.withdrawFunds(t),a)).data,transferFunds:async(t,a)=>(await n.post(i.wallets.transferFunds(t),a)).data}};function c(t){document.cookie="".concat(r,"=").concat(t,"; path=/; max-age=").concat(86400,"; SameSite=Lax"),localStorage.setItem(r,t)}function u(){{let t=document.cookie.split(";").find(t=>t.trim().startsWith("".concat(r,"=")));if(t){let a=t.split("=")[1];return localStorage.setItem(r,a),a}return localStorage.getItem(r)}}function l(){document.cookie="".concat(r,"=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT"),localStorage.removeItem(r)}async function d(){try{console.log("Validating auth token...");let t=u();if(console.log("Stored token found:",!!t),!t)return console.log("No token found, returning invalid"),{isValid:!1,user:null};if("mock-token-for-testing"===t){console.log("Mock token detected, returning mock streamer user for testing");let t={id:"mock-streamer-123",email:"streamer@test.com",name:"Test Streamer",username:"teststreamer",role:"streamer",profilePicture:"/api/placeholder/40/40",bio:"Mock streamer for testing",location:"Test Location",website:"https://test.com",timezone:"UTC",notifications:{email:!0,push:!0,sms:!1},privacy:{profilePublic:!0,showEmail:!1,showLocation:!0},isEmailVerified:!0,twoFactorEnabled:!1,status:"active",createdAt:new Date().toISOString(),lastLoginAt:new Date().toISOString()};return{isValid:!0,user:t}}let a=await o.auth.getProfile();if(console.log("Profile response:",a),a&&a.user)return console.log("Token validation successful, user:",a.user.username),{isValid:!0,user:a.user};return console.log("Token validation failed: no user data in response"),{isValid:!1,user:null}}catch(t){if(console.error("Token validation error:",t),u())return console.log("Backend not available, returning mock user for testing"),{isValid:!0,user:{id:"mock-streamer-backend-error",email:"streamer@test.com",name:"Test Streamer (Backend Error)",username:"teststreamer",role:"streamer",profilePicture:"/api/placeholder/40/40",bio:"Mock streamer for testing (backend error)",location:"Test Location",website:"https://test.com",timezone:"UTC",notifications:{email:!0,push:!0,sms:!1},privacy:{profilePublic:!0,showEmail:!1,showLocation:!0},isEmailVerified:!0,twoFactorEnabled:!1,status:"active",createdAt:new Date().toISOString(),lastLoginAt:new Date().toISOString()}};return{isValid:!1,user:null}}}function p(){return!1}let w=async()=>{let t=await fetch("https://api.vietqr.io/v2/banks");if(!t.ok)throw Error("Failed to fetch bank list");return t.json()},g=async()=>{let t=u();if(!t)throw Error("Authentication required");let a=await fetch("/api/users/bank-accounts",{headers:{Authorization:"Bearer ".concat(t)}});if(!a.ok)throw Error("Failed to fetch bank accounts");let e=await a.json();return Array.isArray(e)?e:e.data||e.accounts||[]},f=async t=>{let a=u();if(!a)throw Error("Authentication required");let e=await fetch("/api/users/bank-accounts",{method:"POST",headers:{Authorization:"Bearer ".concat(a),"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw Error((await e.json()).message||"Failed to create bank account");let s=await e.json();return s.data||s},h=async(t,a)=>{let e=u();if(!e)throw Error("Authentication required");let s=await fetch("/api/users/bank-accounts/".concat(t),{method:"PATCH",headers:{Authorization:"Bearer ".concat(e),"Content-Type":"application/json"},body:JSON.stringify(a)});if(!s.ok)throw Error((await s.json()).message||"Failed to update bank account");let r=await s.json();return r.data||r},m=async t=>{let a=u();if(!a)throw Error("Authentication required");let e=await fetch("/api/users/bank-accounts/".concat(t),{method:"DELETE",headers:{Authorization:"Bearer ".concat(a)}});if(!e.ok)throw Error((await e.json()).message||"Failed to delete bank account")},y=async t=>{let a=u();if(!a)throw Error("Authentication required");let e=await fetch("/api/users/bank-accounts/".concat(t,"/set-default"),{method:"PATCH",headers:{Authorization:"Bearer ".concat(a),"Content-Type":"application/json"}});if(!e.ok)throw Error((await e.json()).message||"Failed to set default bank account");let s=await e.json();return s.data||s}}}]);