"use strict";(()=>{var e={};e.id=9073,e.ids=[9073],e.modules={30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4595:(e,s,t)=>{t.r(s),t.d(s,{headerHooks:()=>m,originalPathname:()=>j,patchFetch:()=>y,requestAsyncStorage:()=>f,routeModule:()=>h,serverHooks:()=>g,staticGenerationAsyncStorage:()=>p,staticGenerationBailout:()=>k});var n={};t.r(n),t.d(n,{DELETE:()=>c,GET:()=>d,PUT:()=>l});var a=t(6170),r=t(8533),o=t(54387),i=t(40064);let u="http://xscan-backend:3001";async function c(e,{params:s}){try{let t=e.headers.get("authorization");if(!t)return i.Z.json({success:!1,message:"Authorization header required"},{status:401});let{id:n}=s;if(!n)return i.Z.json({success:!1,message:"Donation link ID is required"},{status:400});for(let e of[`/api/donation-links/${n}`,`/api/donations/links/${n}`])try{let s=await fetch(`${u}${e}`,{method:"DELETE",headers:{Authorization:t}});if(s.ok)return i.Z.json({success:!0,message:"Donation link deleted successfully"});if(404!==s.status){let e="Request failed";try{e=(await s.json()).message||e}catch{}return i.Z.json({success:!1,message:e},{status:s.status})}}catch(s){console.error(`Error trying path ${e}:`,s)}return i.Z.json({success:!1,message:"Donation link not found"},{status:404})}catch(e){return console.error("Error deleting donation link:",e),i.Z.json({success:!1,message:"Internal server error"},{status:500})}}async function d(e,{params:s}){try{let t=e.headers.get("authorization");if(!t)return i.Z.json({success:!1,message:"Authorization header required"},{status:401});let{id:n}=s;if(!n)return i.Z.json({success:!1,message:"Donation link ID is required"},{status:400});for(let e of[`/api/donation-links/${n}`,`/api/donations/links/${n}`])try{let s=await fetch(`${u}${e}`,{headers:{Authorization:t}});if(s.ok){let e=await s.json(),t=e.data??e;return t&&(t.id=t._id||t.id),i.Z.json({success:!0,data:t})}if(404!==s.status){let e="Request failed";try{e=(await s.json()).message||e}catch{}return i.Z.json({success:!1,message:e},{status:s.status})}}catch(s){console.error(`Error trying path ${e}:`,s)}return i.Z.json({success:!1,message:"Donation link not found"},{status:404})}catch(e){return console.error("Error fetching donation link:",e),i.Z.json({success:!1,message:"Internal server error"},{status:500})}}async function l(e,{params:s}){try{let t=e.headers.get("authorization");if(!t)return i.Z.json({success:!1,message:"Authorization header required"},{status:401});let{id:n}=s;if(!n)return i.Z.json({success:!1,message:"Donation link ID is required"},{status:400});let a=await e.json();for(let e of[`/api/donation-links/${n}`,`/api/donations/links/${n}`])try{let s=await fetch(`${u}${e}`,{method:"PUT",headers:{"Content-Type":"application/json",Authorization:t},body:JSON.stringify(a)});if(s.ok){let e=await s.json(),t=e.data??e;return t&&(t.id=t._id||t.id),i.Z.json({success:!0,data:t,message:e.message||"Donation link updated successfully"})}if(404!==s.status){let e="Request failed";try{e=(await s.json()).message||e}catch{}return i.Z.json({success:!1,message:e},{status:s.status})}}catch(s){console.error(`Error trying path ${e}:`,s)}return i.Z.json({success:!1,message:"Donation link not found"},{status:404})}catch(e){return console.error("Error updating donation link:",e),i.Z.json({success:!1,message:"Internal server error"},{status:500})}}let h=new a.AppRouteRouteModule({definition:{kind:r.x.APP_ROUTE,page:"/api/donation-links/[id]/route",pathname:"/api/donation-links/[id]",filename:"route",bundlePath:"app/api/donation-links/[id]/route"},resolvedPagePath:"D:\\repo\\xscan\\frontend\\src\\app\\api\\donation-links\\[id]\\route.ts",nextConfigOutput:"standalone",userland:n}),{requestAsyncStorage:f,staticGenerationAsyncStorage:p,serverHooks:g,headerHooks:m,staticGenerationBailout:k}=h,j="/api/donation-links/[id]/route";function y(){return(0,o.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:p})}}};var s=require("../../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),n=s.X(0,[3499,7386],()=>t(4595));module.exports=n})();