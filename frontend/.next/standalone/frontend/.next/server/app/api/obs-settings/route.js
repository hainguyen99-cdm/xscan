"use strict";(()=>{var e={};e.id=8351,e.ids=[8351],e.modules={30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},9440:(e,t,o)=>{o.r(t),o.d(t,{headerHooks:()=>y,originalPathname:()=>m,patchFetch:()=>b,requestAsyncStorage:()=>p,routeModule:()=>f,serverHooks:()=>h,staticGenerationAsyncStorage:()=>D,staticGenerationBailout:()=>S});var s={};o.r(s),o.d(s,{GET:()=>c,PATCH:()=>g,POST:()=>d});var r=o(6170),n=o(8533),a=o(54387),i=o(40064);let l=(()=>{process.env.NEXT_PUBLIC_BACKEND_URL;let e="http://xscan-backend:3001";return e.includes("localhost:3000")&&(e=e.replace("localhost:3000","localhost:3001")),e})();async function u(e){try{if((e.headers.get("content-type")||"").includes("multipart/form-data")){let t=await e.formData(),o={};for(let[e,s]of Array.from(t.entries()))if(s instanceof File)try{let t=await s.arrayBuffer(),r=Buffer.from(t).toString("base64");o[e]={name:s.name,type:s.type,size:s.size,data:`data:${s.type};base64,${r}`},console.log(`📁 Processed file: ${s.name}, size: ${s.size} bytes, encoded: ${r.length} chars`)}catch(e){throw console.error(`❌ Error processing file ${s.name}:`,e),Error(`Failed to process file: ${s.name}`)}else o[e]=s;return o}{let t=await e.text();if(!t)return{};if(console.log(`📝 Raw request body size: ${t.length} characters`),t.length>52428800)throw Error("Request payload exceeds 50MB limit");try{return JSON.parse(t)}catch(e){throw console.error("Failed to parse JSON body:",e),Error("Invalid JSON payload")}}}catch(e){throw console.error("Error parsing request body:",e),e}}async function c(e){try{let t=e.headers.get("authorization");if(!t)return i.Z.json({error:"Authorization header required"},{status:401});console.log("\uD83D\uDD0D Fetching OBS settings for user..."),console.log("\uD83C\uDF10 Backend URL:",l);try{let e=await fetch(`${l}/api/health`,{method:"GET",headers:{"Content-Type":"application/json"}});console.log("\uD83C\uDFE5 Backend health check status:",e.status)}catch(e){return console.error("❌ Backend connectivity test failed:",e),i.Z.json({error:"Backend service is not available. Please ensure the backend server is running on port 3001.",code:"BACKEND_UNAVAILABLE"},{status:503})}let o=`${l}/api/obs-settings/my-settings`;console.log("\uD83D\uDCE1 Making request to:",o);let s=await fetch(o,{headers:{Authorization:t,"Content-Type":"application/json"}});if(console.log(`📡 Backend response status: ${s.status}`),console.log(`📡 Backend response statusText: ${s.statusText}`),404===s.status){console.log("⚠️ OBS settings not found, creating default settings..."),console.log("\uD83D\uDC64 Getting user profile from backend to get id...");let e=await fetch(`${l}/api/auth/profile`,{headers:{Authorization:t,"Content-Type":"application/json"}});if(!e.ok){let t=await e.json();return console.error("❌ Failed to get user profile:",t),i.Z.json(t,{status:e.status})}let r=await e.json();console.log("\uD83D\uDCE6 Raw profile response:",r),console.log("\uD83D\uDCE6 Profile response type:",typeof r),console.log("\uD83D\uDCE6 Profile response keys:",Object.keys(r));let n=r?.user?.id;if(console.log("\uD83D\uDC64 User ID for streamerId:",n),console.log("\uD83D\uDD0D Available fields in profileData:",Object.keys(r)),r.user&&(console.log("\uD83D\uDD0D Found nested user object:",r.user),console.log("\uD83D\uDD0D User object keys:",Object.keys(r.user)),console.log("\uD83D\uDD0D User ID from nested object:",r.user.id)),!n)return console.error("❌ Could not extract user ID from profile response"),console.error("❌ Full profile response:",JSON.stringify(r,null,2)),i.Z.json({error:"Could not determine user ID for OBS settings creation",code:"USER_ID_MISSING"},{status:400});let a=await fetch(`${l}/api/obs-settings`,{method:"POST",headers:{Authorization:t,"Content-Type":"application/json"},body:JSON.stringify({streamerId:n,imageSettings:{enabled:!0,mediaType:"image",width:300,height:200,borderRadius:8,shadow:!0,shadowColor:"#000000",shadowBlur:10,shadowOffsetX:2,shadowOffsetY:2},soundSettings:{enabled:!0,volume:80,fadeIn:0,fadeOut:0,loop:!1},animationSettings:{enabled:!0,animationType:"fade",duration:500,easing:"ease-out",direction:"right",bounceIntensity:20,zoomScale:1.2},styleSettings:{backgroundColor:"#1a1a1a",textColor:"#ffffff",accentColor:"#00ff00",borderColor:"#333333",borderWidth:2,borderStyle:"solid",fontFamily:"Arial, sans-serif",fontSize:16,fontWeight:"normal",fontStyle:"normal",textShadow:!0,textShadowColor:"#000000",textShadowBlur:3,textShadowOffsetX:1,textShadowOffsetY:1},positionSettings:{x:100,y:100,anchor:"top-left",zIndex:1e3,responsive:!0,mobileScale:.8},displaySettings:{duration:5e3,fadeInDuration:300,fadeOutDuration:300,autoHide:!0,showProgress:!1,progressColor:"#00ff00",progressHeight:3},generalSettings:{enabled:!0,maxAlerts:3,alertSpacing:20,cooldown:1e3,priority:"medium"},isActive:!0})});if(console.log(`📝 Create settings response status: ${a.status}`),!a.ok){let e=await a.json();return console.error("❌ Failed to create OBS settings:",e),i.Z.json(e,{status:a.status})}console.log("✅ OBS settings created successfully, fetching settings..."),s=await fetch(o,{headers:{Authorization:t,"Content-Type":"application/json"}}),console.log(`📡 Second attempt response status: ${s.status}`)}if(!s.ok){let e=await s.json();if(console.error("❌ Error response from backend:",e),console.error("❌ Response status:",s.status),console.error("❌ Response statusText:",s.statusText),403===s.status)return i.Z.json({error:"Access denied. OBS settings are only available for streamers and administrators.",code:"ACCESS_DENIED"},{status:403});return i.Z.json(e,{status:s.status})}let r=await s.json();return r&&r.streamerId&&r.alertToken&&!r.widgetUrl&&(r.widgetUrl=`${l}/api/widget-public/alert/${r.streamerId}/${r.alertToken}`),console.log("✅ Successfully retrieved OBS settings:",r),i.Z.json(r)}catch(e){return console.error("\uD83D\uDCA5 Unexpected error in OBS settings API:",e),i.Z.json({error:"Failed to fetch OBS settings"},{status:500})}}async function d(e){try{let t=e.headers.get("authorization");if(!t)return i.Z.json({error:"Authorization header required"},{status:401});let o=await e.json(),s=await fetch(`${l}/api/obs-settings`,{method:"POST",headers:{Authorization:t,"Content-Type":"application/json"},body:JSON.stringify(o)});if(!s.ok){let e=await s.json();if(403===s.status)return i.Z.json({error:"Access denied. OBS settings are only available for streamers and administrators.",code:"ACCESS_DENIED"},{status:403});return i.Z.json(e,{status:s.status})}let r=await s.json();return i.Z.json(r,{status:201})}catch(e){return console.error("Error creating OBS settings:",e),i.Z.json({error:"Failed to create OBS settings"},{status:500})}}async function g(e){try{console.log("\uD83D\uDE80 PATCH request received for OBS settings");let t=e.headers.get("authorization");if(!t)return i.Z.json({error:"Authorization header required"},{status:401});let o=e.headers.get("content-length"),s=e.headers.get("content-type");console.log("\uD83D\uDCDD Request content-length header:",o),console.log("\uD83D\uDCDD Request content-type:",s),console.log("\uD83D\uDCDD Request method:",e.method),console.log("\uD83D\uDCDD Request URL:",e.url),console.log("\uD83D\uDD04 Starting to parse request body...");let r=await u(e);console.log("\uD83D\uDCDD Parsed request body size:",JSON.stringify(r).length,"characters"),console.log("\uD83D\uDCDD Body keys:",Object.keys(r)),JSON.stringify(r).length>52428800&&console.warn("⚠️ Body size exceeds 50MB, may cause backend issues");let n=await fetch(`${l}/api/obs-settings/my-settings`,{method:"PATCH",headers:{Authorization:t,"Content-Type":"application/json"},body:JSON.stringify(r)});if(!n.ok){let e=await n.json();if(console.error("❌ Backend response error:",n.status,e),403===n.status)return i.Z.json({error:"Access denied. OBS settings are only available for streamers and administrators.",code:"ACCESS_DENIED"},{status:403});if(404===n.status)return i.Z.json({error:"OBS settings not found. Please create settings first.",code:"SETTINGS_NOT_FOUND"},{status:404});return i.Z.json(e,{status:n.status})}let a=await n.json();return console.log("✅ Backend update successful"),i.Z.json(a,{status:200})}catch(e){if(console.error("Error updating OBS settings:",e),e instanceof Error&&e.message.includes("Failed to parse request body"))return i.Z.json({error:"Request payload is too large or invalid. Please ensure files are under 50MB.",code:"PAYLOAD_TOO_LARGE"},{status:413});return i.Z.json({error:"Failed to update OBS settings"},{status:500})}}let f=new r.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/obs-settings/route",pathname:"/api/obs-settings",filename:"route",bundlePath:"app/api/obs-settings/route"},resolvedPagePath:"D:\\repo\\xscan\\frontend\\src\\app\\api\\obs-settings\\route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:p,staticGenerationAsyncStorage:D,serverHooks:h,headerHooks:y,staticGenerationBailout:S}=f,m="/api/obs-settings/route";function b(){return(0,a.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:D})}}};var t=require("../../../webpack-runtime.js");t.C(e);var o=e=>t(t.s=e),s=t.X(0,[3499,7386],()=>o(9440));module.exports=s})();